//Матриця Віднімання, множення на матрицю, додавання цілого числа



#include <iostream>
#include <vector>

class Matrix {
private:
    std::vector<std::vector<int>> data;
    int rows;
    int cols;

public:

    Matrix() : rows(0), cols(0) {}

    //з параметрами
    Matrix(int rows, int cols, const std::vector<std::vector<int>>& input_data)
        : rows(rows), cols(cols), data(input_data) {}

    //копія
    Matrix(const Matrix& other)
        : rows(other.rows), cols(other.cols), data(other.data) {}

    //-
    Matrix operator-(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            std::cerr << "Error: Matrices must have the same dimensions for subtraction.\n";
            return Matrix();
        }

        Matrix result(rows, cols, data);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] -= other.data[i][j];
            }
        }

        return result;
    }

    //*на число
    Matrix operator*(int scalar) const {
        Matrix result(rows, cols, data);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] *= scalar;
            }
        }

        return result;
    }

    //+
    Matrix operator+(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            std::cerr << "Error: Matrices must have the same dimensions for addition.\n";
            return Matrix();
        }

        Matrix result(rows, cols, data);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] += other.data[i][j];
            }
        }

        return result;
    }

    void display() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    std::vector<std::vector<int>> data1 = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
    std::vector<std::vector<int>> data2 = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };

    Matrix matrix1(3, 3, data1);
    Matrix matrix2(3, 3, data2);

    std::cout << "Matrix 1:\n";
    matrix1.display();

    std::cout << "\nMatrix 2:\n";
    matrix2.display();

    //-
    Matrix result_subtraction = matrix1 - matrix2;
    std::cout << "\nSubtraction Result:\n";
    result_subtraction.display();

    //*на число
    Matrix result_multiplication = matrix1 * 2;
    std::cout << "\nMultiplication Result:\n";
    result_multiplication.display();

    //+
    Matrix result_addition = matrix1 + matrix2;
    std::cout << "\nAddition Result:\n";
    result_addition.display();

    return 0;
}
